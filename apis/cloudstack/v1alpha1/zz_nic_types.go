// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NICInitParameters struct {

	// The IP address to assign to the NIC. Changing this
	// forces a new resource to be created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The ID of the network to plug the NIC into. Changing
	// this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Network
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in cloudstack to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in cloudstack to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// The ID of the virtual machine to which to
	// attach the NIC. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Instance
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`

	// Reference to a Instance in cloudstack to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDRef *v1.Reference `json:"virtualMachineIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudstack to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDSelector *v1.Selector `json:"virtualMachineIdSelector,omitempty" tf:"-"`
}

type NICObservation struct {

	// The ID of the NIC.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP address to assign to the NIC. Changing this
	// forces a new resource to be created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The ID of the network to plug the NIC into. Changing
	// this forces a new resource to be created.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// The ID of the virtual machine to which to
	// attach the NIC. Changing this forces a new resource to be created.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type NICParameters struct {

	// The IP address to assign to the NIC. Changing this
	// forces a new resource to be created.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The ID of the network to plug the NIC into. Changing
	// this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in cloudstack to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in cloudstack to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// The ID of the virtual machine to which to
	// attach the NIC. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`

	// Reference to a Instance in cloudstack to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDRef *v1.Reference `json:"virtualMachineIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudstack to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDSelector *v1.Selector `json:"virtualMachineIdSelector,omitempty" tf:"-"`
}

// NICSpec defines the desired state of NIC
type NICSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NICParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NICInitParameters `json:"initProvider,omitempty"`
}

// NICStatus defines the observed state of NIC.
type NICStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NICObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NIC is the Schema for the NICs API. Creates an additional NIC to add a VM to the specified network.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type NIC struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NICSpec   `json:"spec"`
	Status            NICStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NICList contains a list of NICs
type NICList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NIC `json:"items"`
}

// Repository type metadata.
var (
	NIC_Kind             = "NIC"
	NIC_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NIC_Kind}.String()
	NIC_KindAPIVersion   = NIC_Kind + "." + CRDGroupVersion.String()
	NIC_GroupVersionKind = CRDGroupVersion.WithKind(NIC_Kind)
)

func init() {
	SchemeBuilder.Register(&NIC{}, &NICList{})
}
