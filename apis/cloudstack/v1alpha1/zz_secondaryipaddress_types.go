// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecondaryIPAddressInitParameters struct {

	// The IP address to bind the to NIC. If not supplied
	// an IP address will be selected randomly. Changing this forces a new resource
	// to be	created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The NIC ID to which you want to attach the secondary IP
	// address. Changing this forces a new resource to be created (defaults to the
	// ID of the primary NIC)
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.NIC
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// Reference to a NIC in cloudstack to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDRef *v1.Reference `json:"nicIdRef,omitempty" tf:"-"`

	// Selector for a NIC in cloudstack to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDSelector *v1.Selector `json:"nicIdSelector,omitempty" tf:"-"`

	// The ID of the virtual machine to which you
	// want to attach the secondary IP address. Changing this forces a new resource
	// to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Instance
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`

	// Reference to a Instance in cloudstack to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDRef *v1.Reference `json:"virtualMachineIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudstack to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDSelector *v1.Selector `json:"virtualMachineIdSelector,omitempty" tf:"-"`
}

type SecondaryIPAddressObservation struct {

	// The secondary IP address ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP address to bind the to NIC. If not supplied
	// an IP address will be selected randomly. Changing this forces a new resource
	// to be	created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The NIC ID to which you want to attach the secondary IP
	// address. Changing this forces a new resource to be created (defaults to the
	// ID of the primary NIC)
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// The ID of the virtual machine to which you
	// want to attach the secondary IP address. Changing this forces a new resource
	// to be created.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type SecondaryIPAddressParameters struct {

	// The IP address to bind the to NIC. If not supplied
	// an IP address will be selected randomly. Changing this forces a new resource
	// to be	created.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The NIC ID to which you want to attach the secondary IP
	// address. Changing this forces a new resource to be created (defaults to the
	// ID of the primary NIC)
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.NIC
	// +kubebuilder:validation:Optional
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// Reference to a NIC in cloudstack to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDRef *v1.Reference `json:"nicIdRef,omitempty" tf:"-"`

	// Selector for a NIC in cloudstack to populate nicId.
	// +kubebuilder:validation:Optional
	NicIDSelector *v1.Selector `json:"nicIdSelector,omitempty" tf:"-"`

	// The ID of the virtual machine to which you
	// want to attach the secondary IP address. Changing this forces a new resource
	// to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`

	// Reference to a Instance in cloudstack to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDRef *v1.Reference `json:"virtualMachineIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cloudstack to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDSelector *v1.Selector `json:"virtualMachineIdSelector,omitempty" tf:"-"`
}

// SecondaryIPAddressSpec defines the desired state of SecondaryIPAddress
type SecondaryIPAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecondaryIPAddressParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecondaryIPAddressInitParameters `json:"initProvider,omitempty"`
}

// SecondaryIPAddressStatus defines the observed state of SecondaryIPAddress.
type SecondaryIPAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecondaryIPAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecondaryIPAddress is the Schema for the SecondaryIPAddresss API. Assigns a secondary IP to a NIC.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type SecondaryIPAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecondaryIPAddressSpec   `json:"spec"`
	Status            SecondaryIPAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecondaryIPAddressList contains a list of SecondaryIPAddresss
type SecondaryIPAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecondaryIPAddress `json:"items"`
}

// Repository type metadata.
var (
	SecondaryIPAddress_Kind             = "SecondaryIPAddress"
	SecondaryIPAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecondaryIPAddress_Kind}.String()
	SecondaryIPAddress_KindAPIVersion   = SecondaryIPAddress_Kind + "." + CRDGroupVersion.String()
	SecondaryIPAddress_GroupVersionKind = CRDGroupVersion.WithKind(SecondaryIPAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&SecondaryIPAddress{}, &SecondaryIPAddressList{})
}
