// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPNConnectionInitParameters struct {

	// The Customer Gateway ID to connect.
	// Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.VPNCustomerGateway
	CustomerGatewayID *string `json:"customerGatewayId,omitempty" tf:"customer_gateway_id,omitempty"`

	// Reference to a VPNCustomerGateway in cloudstack to populate customerGatewayId.
	// +kubebuilder:validation:Optional
	CustomerGatewayIDRef *v1.Reference `json:"customerGatewayIdRef,omitempty" tf:"-"`

	// Selector for a VPNCustomerGateway in cloudstack to populate customerGatewayId.
	// +kubebuilder:validation:Optional
	CustomerGatewayIDSelector *v1.Selector `json:"customerGatewayIdSelector,omitempty" tf:"-"`

	// The VPN Gateway ID to connect. Changing
	// this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.VPNGateway
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`

	// Reference to a VPNGateway in cloudstack to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDRef *v1.Reference `json:"vpnGatewayIdRef,omitempty" tf:"-"`

	// Selector for a VPNGateway in cloudstack to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDSelector *v1.Selector `json:"vpnGatewayIdSelector,omitempty" tf:"-"`
}

type VPNConnectionObservation struct {

	// The Customer Gateway ID to connect.
	// Changing this forces a new resource to be created.
	CustomerGatewayID *string `json:"customerGatewayId,omitempty" tf:"customer_gateway_id,omitempty"`

	// The ID of the VPN Connection.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The VPN Gateway ID to connect. Changing
	// this forces a new resource to be created.
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`
}

type VPNConnectionParameters struct {

	// The Customer Gateway ID to connect.
	// Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.VPNCustomerGateway
	// +kubebuilder:validation:Optional
	CustomerGatewayID *string `json:"customerGatewayId,omitempty" tf:"customer_gateway_id,omitempty"`

	// Reference to a VPNCustomerGateway in cloudstack to populate customerGatewayId.
	// +kubebuilder:validation:Optional
	CustomerGatewayIDRef *v1.Reference `json:"customerGatewayIdRef,omitempty" tf:"-"`

	// Selector for a VPNCustomerGateway in cloudstack to populate customerGatewayId.
	// +kubebuilder:validation:Optional
	CustomerGatewayIDSelector *v1.Selector `json:"customerGatewayIdSelector,omitempty" tf:"-"`

	// The VPN Gateway ID to connect. Changing
	// this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.VPNGateway
	// +kubebuilder:validation:Optional
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`

	// Reference to a VPNGateway in cloudstack to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDRef *v1.Reference `json:"vpnGatewayIdRef,omitempty" tf:"-"`

	// Selector for a VPNGateway in cloudstack to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDSelector *v1.Selector `json:"vpnGatewayIdSelector,omitempty" tf:"-"`
}

// VPNConnectionSpec defines the desired state of VPNConnection
type VPNConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNConnectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPNConnectionInitParameters `json:"initProvider,omitempty"`
}

// VPNConnectionStatus defines the observed state of VPNConnection.
type VPNConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VPNConnection is the Schema for the VPNConnections API. Creates a site to site VPN connection.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type VPNConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPNConnectionSpec   `json:"spec"`
	Status            VPNConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNConnectionList contains a list of VPNConnections
type VPNConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNConnection `json:"items"`
}

// Repository type metadata.
var (
	VPNConnection_Kind             = "VPNConnection"
	VPNConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNConnection_Kind}.String()
	VPNConnection_KindAPIVersion   = VPNConnection_Kind + "." + CRDGroupVersion.String()
	VPNConnection_GroupVersionKind = CRDGroupVersion.WithKind(VPNConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&VPNConnection{}, &VPNConnectionList{})
}
