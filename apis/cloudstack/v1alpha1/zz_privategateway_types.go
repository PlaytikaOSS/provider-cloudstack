// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrivateGatewayInitParameters struct {

	// The ACL ID that should be attached to the network.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.NetworkACL
	ACLID *string `json:"aclId,omitempty" tf:"acl_id,omitempty"`

	// Reference to a NetworkACL in cloudstack to populate aclId.
	// +kubebuilder:validation:Optional
	ACLIDRef *v1.Reference `json:"aclIdRef,omitempty" tf:"-"`

	// Selector for a NetworkACL in cloudstack to populate aclId.
	// +kubebuilder:validation:Optional
	ACLIDSelector *v1.Selector `json:"aclIdSelector,omitempty" tf:"-"`

	// the gateway of the Private gateway. Changing this
	// forces a new resource to be created.
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// the IP address of the Private gateway. Changing this forces
	// a new resource to be created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The netmask of the Private gateway. Changing
	// this forces a new resource to be created.
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// The name or ID of the network offering to use for
	// the private gateways network connection.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.NetworkOffering
	NetworkOffering *string `json:"networkOffering,omitempty" tf:"network_offering,omitempty"`

	// Reference to a NetworkOffering in cloudstack to populate networkOffering.
	// +kubebuilder:validation:Optional
	NetworkOfferingRef *v1.Reference `json:"networkOfferingRef,omitempty" tf:"-"`

	// Selector for a NetworkOffering in cloudstack to populate networkOffering.
	// +kubebuilder:validation:Optional
	NetworkOfferingSelector *v1.Selector `json:"networkOfferingSelector,omitempty" tf:"-"`

	// The ID of the physical network this private
	// gateway belongs to.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Network
	PhysicalNetworkID *string `json:"physicalNetworkId,omitempty" tf:"physical_network_id,omitempty"`

	// Reference to a Network in cloudstack to populate physicalNetworkId.
	// +kubebuilder:validation:Optional
	PhysicalNetworkIDRef *v1.Reference `json:"physicalNetworkIdRef,omitempty" tf:"-"`

	// Selector for a Network in cloudstack to populate physicalNetworkId.
	// +kubebuilder:validation:Optional
	PhysicalNetworkIDSelector *v1.Selector `json:"physicalNetworkIdSelector,omitempty" tf:"-"`

	// The VPC ID in which to create this Private gateway. Changing
	// this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.VPC
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in cloudstack to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in cloudstack to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// The VLAN number (1-4095) the network will use.
	Vlan *string `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

type PrivateGatewayObservation struct {

	// The ACL ID that should be attached to the network.
	ACLID *string `json:"aclId,omitempty" tf:"acl_id,omitempty"`

	// the gateway of the Private gateway. Changing this
	// forces a new resource to be created.
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// The ID of the private gateway.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// the IP address of the Private gateway. Changing this forces
	// a new resource to be created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The netmask of the Private gateway. Changing
	// this forces a new resource to be created.
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// The name or ID of the network offering to use for
	// the private gateways network connection.
	NetworkOffering *string `json:"networkOffering,omitempty" tf:"network_offering,omitempty"`

	// The ID of the physical network this private
	// gateway belongs to.
	PhysicalNetworkID *string `json:"physicalNetworkId,omitempty" tf:"physical_network_id,omitempty"`

	// The VPC ID in which to create this Private gateway. Changing
	// this forces a new resource to be created.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// The VLAN number (1-4095) the network will use.
	Vlan *string `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

type PrivateGatewayParameters struct {

	// The ACL ID that should be attached to the network.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.NetworkACL
	// +kubebuilder:validation:Optional
	ACLID *string `json:"aclId,omitempty" tf:"acl_id,omitempty"`

	// Reference to a NetworkACL in cloudstack to populate aclId.
	// +kubebuilder:validation:Optional
	ACLIDRef *v1.Reference `json:"aclIdRef,omitempty" tf:"-"`

	// Selector for a NetworkACL in cloudstack to populate aclId.
	// +kubebuilder:validation:Optional
	ACLIDSelector *v1.Selector `json:"aclIdSelector,omitempty" tf:"-"`

	// the gateway of the Private gateway. Changing this
	// forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// the IP address of the Private gateway. Changing this forces
	// a new resource to be created.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The netmask of the Private gateway. Changing
	// this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// The name or ID of the network offering to use for
	// the private gateways network connection.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.NetworkOffering
	// +kubebuilder:validation:Optional
	NetworkOffering *string `json:"networkOffering,omitempty" tf:"network_offering,omitempty"`

	// Reference to a NetworkOffering in cloudstack to populate networkOffering.
	// +kubebuilder:validation:Optional
	NetworkOfferingRef *v1.Reference `json:"networkOfferingRef,omitempty" tf:"-"`

	// Selector for a NetworkOffering in cloudstack to populate networkOffering.
	// +kubebuilder:validation:Optional
	NetworkOfferingSelector *v1.Selector `json:"networkOfferingSelector,omitempty" tf:"-"`

	// The ID of the physical network this private
	// gateway belongs to.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Network
	// +kubebuilder:validation:Optional
	PhysicalNetworkID *string `json:"physicalNetworkId,omitempty" tf:"physical_network_id,omitempty"`

	// Reference to a Network in cloudstack to populate physicalNetworkId.
	// +kubebuilder:validation:Optional
	PhysicalNetworkIDRef *v1.Reference `json:"physicalNetworkIdRef,omitempty" tf:"-"`

	// Selector for a Network in cloudstack to populate physicalNetworkId.
	// +kubebuilder:validation:Optional
	PhysicalNetworkIDSelector *v1.Selector `json:"physicalNetworkIdSelector,omitempty" tf:"-"`

	// The VPC ID in which to create this Private gateway. Changing
	// this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in cloudstack to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in cloudstack to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// The VLAN number (1-4095) the network will use.
	// +kubebuilder:validation:Optional
	Vlan *string `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

// PrivateGatewaySpec defines the desired state of PrivateGateway
type PrivateGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivateGatewayParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivateGatewayInitParameters `json:"initProvider,omitempty"`
}

// PrivateGatewayStatus defines the observed state of PrivateGateway.
type PrivateGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivateGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PrivateGateway is the Schema for the PrivateGateways API. Creates a private gateway.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type PrivateGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gateway) || (has(self.initProvider) && has(self.initProvider.gateway))",message="spec.forProvider.gateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipAddress) || (has(self.initProvider) && has(self.initProvider.ipAddress))",message="spec.forProvider.ipAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.netmask) || (has(self.initProvider) && has(self.initProvider.netmask))",message="spec.forProvider.netmask is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vlan) || (has(self.initProvider) && has(self.initProvider.vlan))",message="spec.forProvider.vlan is a required parameter"
	Spec   PrivateGatewaySpec   `json:"spec"`
	Status PrivateGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivateGatewayList contains a list of PrivateGateways
type PrivateGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivateGateway `json:"items"`
}

// Repository type metadata.
var (
	PrivateGateway_Kind             = "PrivateGateway"
	PrivateGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivateGateway_Kind}.String()
	PrivateGateway_KindAPIVersion   = PrivateGateway_Kind + "." + CRDGroupVersion.String()
	PrivateGateway_GroupVersionKind = CRDGroupVersion.WithKind(PrivateGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivateGateway{}, &PrivateGatewayList{})
}
