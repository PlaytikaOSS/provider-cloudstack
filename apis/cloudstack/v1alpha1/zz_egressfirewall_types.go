// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EgressFirewallInitParameters struct {

	// USE WITH CAUTION! If enabled all the egress firewall
	// rules for this network will be managed by this resource. This means it will
	// delete all firewall rules that are not in your config! (defaults false)
	Managed *bool `json:"managed,omitempty" tf:"managed,omitempty"`

	// The network ID for which to create the egress
	// firewall rules. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Network
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in cloudstack to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in cloudstack to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Specifies how much rules will be created or deleted
	// concurrently. (defaults 2)
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Can be specified multiple times. Each rule block supports
	// fields documented below. If managed = false at least one rule is required!
	Rule []RuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type EgressFirewallObservation struct {

	// The network ID for which the egress firewall rules are created.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// USE WITH CAUTION! If enabled all the egress firewall
	// rules for this network will be managed by this resource. This means it will
	// delete all firewall rules that are not in your config! (defaults false)
	Managed *bool `json:"managed,omitempty" tf:"managed,omitempty"`

	// The network ID for which to create the egress
	// firewall rules. Changing this forces a new resource to be created.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Specifies how much rules will be created or deleted
	// concurrently. (defaults 2)
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Can be specified multiple times. Each rule block supports
	// fields documented below. If managed = false at least one rule is required!
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type EgressFirewallParameters struct {

	// USE WITH CAUTION! If enabled all the egress firewall
	// rules for this network will be managed by this resource. This means it will
	// delete all firewall rules that are not in your config! (defaults false)
	// +kubebuilder:validation:Optional
	Managed *bool `json:"managed,omitempty" tf:"managed,omitempty"`

	// The network ID for which to create the egress
	// firewall rules. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in cloudstack to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in cloudstack to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Specifies how much rules will be created or deleted
	// concurrently. (defaults 2)
	// +kubebuilder:validation:Optional
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// Can be specified multiple times. Each rule block supports
	// fields documented below. If managed = false at least one rule is required!
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RuleInitParameters struct {

	// A CIDR list to allow access to the given ports.
	// +listType=set
	CidrList []*string `json:"cidrList,omitempty" tf:"cidr_list,omitempty"`

	// The ICMP code to allow. This can only be specified if
	// the protocol is ICMP.
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The ICMP type to allow. This can only be specified if
	// the protocol is ICMP.
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// List of ports and/or port ranges to allow. This can only
	// be specified if the protocol is TCP or UDP.
	// +listType=set
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The name of the protocol to allow. Valid options are:
	// tcp, udp and icmp.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RuleObservation struct {

	// A CIDR list to allow access to the given ports.
	// +listType=set
	CidrList []*string `json:"cidrList,omitempty" tf:"cidr_list,omitempty"`

	// The ICMP code to allow. This can only be specified if
	// the protocol is ICMP.
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The ICMP type to allow. This can only be specified if
	// the protocol is ICMP.
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// List of ports and/or port ranges to allow. This can only
	// be specified if the protocol is TCP or UDP.
	// +listType=set
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The name of the protocol to allow. Valid options are:
	// tcp, udp and icmp.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +mapType=granular
	Uuids map[string]*string `json:"uuids,omitempty" tf:"uuids,omitempty"`
}

type RuleParameters struct {

	// A CIDR list to allow access to the given ports.
	// +kubebuilder:validation:Optional
	// +listType=set
	CidrList []*string `json:"cidrList,omitempty" tf:"cidr_list,omitempty"`

	// The ICMP code to allow. This can only be specified if
	// the protocol is ICMP.
	// +kubebuilder:validation:Optional
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The ICMP type to allow. This can only be specified if
	// the protocol is ICMP.
	// +kubebuilder:validation:Optional
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// List of ports and/or port ranges to allow. This can only
	// be specified if the protocol is TCP or UDP.
	// +kubebuilder:validation:Optional
	// +listType=set
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The name of the protocol to allow. Valid options are:
	// tcp, udp and icmp.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

// EgressFirewallSpec defines the desired state of EgressFirewall
type EgressFirewallSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EgressFirewallParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EgressFirewallInitParameters `json:"initProvider,omitempty"`
}

// EgressFirewallStatus defines the observed state of EgressFirewall.
type EgressFirewallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EgressFirewallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EgressFirewall is the Schema for the EgressFirewalls API. Creates egress firewall rules for a given network.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type EgressFirewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EgressFirewallSpec   `json:"spec"`
	Status            EgressFirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EgressFirewallList contains a list of EgressFirewalls
type EgressFirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EgressFirewall `json:"items"`
}

// Repository type metadata.
var (
	EgressFirewall_Kind             = "EgressFirewall"
	EgressFirewall_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EgressFirewall_Kind}.String()
	EgressFirewall_KindAPIVersion   = EgressFirewall_Kind + "." + CRDGroupVersion.String()
	EgressFirewall_GroupVersionKind = CRDGroupVersion.WithKind(EgressFirewall_Kind)
)

func init() {
	SchemeBuilder.Register(&EgressFirewall{}, &EgressFirewallList{})
}
