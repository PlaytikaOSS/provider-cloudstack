// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StaticRouteInitParameters struct {

	// The CIDR for the static route. Changing this forces
	// a new resource to be created.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// The ID of the Private gateway. Changing this forces
	// a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.PrivateGateway
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a PrivateGateway in cloudstack to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.Reference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a PrivateGateway in cloudstack to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.Selector `json:"gatewayIdSelector,omitempty" tf:"-"`
}

type StaticRouteObservation struct {

	// The CIDR for the static route. Changing this forces
	// a new resource to be created.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// The ID of the Private gateway. Changing this forces
	// a new resource to be created.
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// The ID of the static route.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StaticRouteParameters struct {

	// The CIDR for the static route. Changing this forces
	// a new resource to be created.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// The ID of the Private gateway. Changing this forces
	// a new resource to be created.
	// +crossplane:generate:reference:type=github.com/playtika/provider-cloudstack/apis/cloudstack/v1alpha1.PrivateGateway
	// +kubebuilder:validation:Optional
	GatewayID *string `json:"gatewayId,omitempty" tf:"gateway_id,omitempty"`

	// Reference to a PrivateGateway in cloudstack to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDRef *v1.Reference `json:"gatewayIdRef,omitempty" tf:"-"`

	// Selector for a PrivateGateway in cloudstack to populate gatewayId.
	// +kubebuilder:validation:Optional
	GatewayIDSelector *v1.Selector `json:"gatewayIdSelector,omitempty" tf:"-"`
}

// StaticRouteSpec defines the desired state of StaticRoute
type StaticRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StaticRouteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StaticRouteInitParameters `json:"initProvider,omitempty"`
}

// StaticRouteStatus defines the observed state of StaticRoute.
type StaticRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StaticRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StaticRoute is the Schema for the StaticRoutes API. Creates a static route.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type StaticRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cidr) || (has(self.initProvider) && has(self.initProvider.cidr))",message="spec.forProvider.cidr is a required parameter"
	Spec   StaticRouteSpec   `json:"spec"`
	Status StaticRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StaticRouteList contains a list of StaticRoutes
type StaticRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StaticRoute `json:"items"`
}

// Repository type metadata.
var (
	StaticRoute_Kind             = "StaticRoute"
	StaticRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StaticRoute_Kind}.String()
	StaticRoute_KindAPIVersion   = StaticRoute_Kind + "." + CRDGroupVersion.String()
	StaticRoute_GroupVersionKind = CRDGroupVersion.WithKind(StaticRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&StaticRoute{}, &StaticRouteList{})
}
