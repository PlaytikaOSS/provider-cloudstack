// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AutoscaleVmProfile.
func (mg *AutoscaleVmProfile) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceOffering),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServiceOfferingRef,
		Selector:     mg.Spec.ForProvider.ServiceOfferingSelector,
		To: reference.To{
			List:    &ServiceOfferingList{},
			Managed: &ServiceOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceOffering")
	}
	mg.Spec.ForProvider.ServiceOffering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceOfferingRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Template),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TemplateRef,
		Selector:     mg.Spec.ForProvider.TemplateSelector,
		To: reference.To{
			List:    &TemplateList{},
			Managed: &Template{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Template")
	}
	mg.Spec.ForProvider.Template = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TemplateRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ZoneRef,
		Selector:     mg.Spec.ForProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Zone")
	}
	mg.Spec.ForProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceOffering),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServiceOfferingRef,
		Selector:     mg.Spec.InitProvider.ServiceOfferingSelector,
		To: reference.To{
			List:    &ServiceOfferingList{},
			Managed: &ServiceOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServiceOffering")
	}
	mg.Spec.InitProvider.ServiceOffering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServiceOfferingRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Template),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.TemplateRef,
		Selector:     mg.Spec.InitProvider.TemplateSelector,
		To: reference.To{
			List:    &TemplateList{},
			Managed: &Template{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Template")
	}
	mg.Spec.InitProvider.Template = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.TemplateRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ZoneRef,
		Selector:     mg.Spec.InitProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Zone")
	}
	mg.Spec.InitProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Disk.
func (mg *Disk) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DiskOffering),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DiskOfferingRef,
		Selector:     mg.Spec.ForProvider.DiskOfferingSelector,
		To: reference.To{
			List:    &DiskOfferingList{},
			Managed: &DiskOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DiskOffering")
	}
	mg.Spec.ForProvider.DiskOffering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DiskOfferingRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ZoneRef,
		Selector:     mg.Spec.ForProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Zone")
	}
	mg.Spec.ForProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DiskOffering),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DiskOfferingRef,
		Selector:     mg.Spec.InitProvider.DiskOfferingSelector,
		To: reference.To{
			List:    &DiskOfferingList{},
			Managed: &DiskOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DiskOffering")
	}
	mg.Spec.InitProvider.DiskOffering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DiskOfferingRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ZoneRef,
		Selector:     mg.Spec.InitProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Zone")
	}
	mg.Spec.InitProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Domain.
func (mg *Domain) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ParentDomainID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ParentDomainIDRef,
		Selector:     mg.Spec.ForProvider.ParentDomainIDSelector,
		To: reference.To{
			List:    &DomainList{},
			Managed: &Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ParentDomainID")
	}
	mg.Spec.ForProvider.ParentDomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ParentDomainIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ParentDomainID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ParentDomainIDRef,
		Selector:     mg.Spec.InitProvider.ParentDomainIDSelector,
		To: reference.To{
			List:    &DomainList{},
			Managed: &Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ParentDomainID")
	}
	mg.Spec.InitProvider.ParentDomainID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ParentDomainIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this EgressFirewall.
func (mg *EgressFirewall) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkIDRef,
		Selector:     mg.Spec.ForProvider.NetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkID")
	}
	mg.Spec.ForProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NetworkIDRef,
		Selector:     mg.Spec.InitProvider.NetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkID")
	}
	mg.Spec.InitProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IPAddress.
func (mg *IPAddress) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkIDRef,
		Selector:     mg.Spec.ForProvider.NetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkID")
	}
	mg.Spec.ForProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NetworkIDRef,
		Selector:     mg.Spec.InitProvider.NetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkID")
	}
	mg.Spec.InitProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LoadBalancerRule.
func (mg *LoadBalancerRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkIDRef,
		Selector:     mg.Spec.ForProvider.NetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkID")
	}
	mg.Spec.ForProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NetworkIDRef,
		Selector:     mg.Spec.InitProvider.NetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkID")
	}
	mg.Spec.InitProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NIC.
func (mg *NIC) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkIDRef,
		Selector:     mg.Spec.ForProvider.NetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkID")
	}
	mg.Spec.ForProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualMachineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VirtualMachineIDRef,
		Selector:     mg.Spec.ForProvider.VirtualMachineIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualMachineID")
	}
	mg.Spec.ForProvider.VirtualMachineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualMachineIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NetworkIDRef,
		Selector:     mg.Spec.InitProvider.NetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkID")
	}
	mg.Spec.InitProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualMachineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VirtualMachineIDRef,
		Selector:     mg.Spec.InitProvider.VirtualMachineIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualMachineID")
	}
	mg.Spec.InitProvider.VirtualMachineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualMachineIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Network.
func (mg *Network) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ACLID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ACLIDRef,
		Selector:     mg.Spec.ForProvider.ACLIDSelector,
		To: reference.To{
			List:    &NetworkACLList{},
			Managed: &NetworkACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ACLID")
	}
	mg.Spec.ForProvider.ACLID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ACLIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkOffering),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkOfferingRef,
		Selector:     mg.Spec.ForProvider.NetworkOfferingSelector,
		To: reference.To{
			List:    &NetworkOfferingList{},
			Managed: &NetworkOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkOffering")
	}
	mg.Spec.ForProvider.NetworkOffering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkOfferingRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ZoneRef,
		Selector:     mg.Spec.ForProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Zone")
	}
	mg.Spec.ForProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ACLID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ACLIDRef,
		Selector:     mg.Spec.InitProvider.ACLIDSelector,
		To: reference.To{
			List:    &NetworkACLList{},
			Managed: &NetworkACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ACLID")
	}
	mg.Spec.InitProvider.ACLID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ACLIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkOffering),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NetworkOfferingRef,
		Selector:     mg.Spec.InitProvider.NetworkOfferingSelector,
		To: reference.To{
			List:    &NetworkOfferingList{},
			Managed: &NetworkOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkOffering")
	}
	mg.Spec.InitProvider.NetworkOffering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkOfferingRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ZoneRef,
		Selector:     mg.Spec.InitProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Zone")
	}
	mg.Spec.InitProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkACL.
func (mg *NetworkACL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkACLRule.
func (mg *NetworkACLRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ACLID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ACLIDRef,
		Selector:     mg.Spec.ForProvider.ACLIDSelector,
		To: reference.To{
			List:    &NetworkACLList{},
			Managed: &NetworkACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ACLID")
	}
	mg.Spec.ForProvider.ACLID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ACLIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ACLID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ACLIDRef,
		Selector:     mg.Spec.InitProvider.ACLIDSelector,
		To: reference.To{
			List:    &NetworkACLList{},
			Managed: &NetworkACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ACLID")
	}
	mg.Spec.InitProvider.ACLID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ACLIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PortForward.
func (mg *PortForward) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPAddressID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IPAddressIDRef,
		Selector:     mg.Spec.ForProvider.IPAddressIDSelector,
		To: reference.To{
			List:    &IPAddressList{},
			Managed: &IPAddress{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddressID")
	}
	mg.Spec.ForProvider.IPAddressID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IPAddressID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.IPAddressIDRef,
		Selector:     mg.Spec.InitProvider.IPAddressIDSelector,
		To: reference.To{
			List:    &IPAddressList{},
			Managed: &IPAddress{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IPAddressID")
	}
	mg.Spec.InitProvider.IPAddressID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IPAddressIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateGateway.
func (mg *PrivateGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ACLID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ACLIDRef,
		Selector:     mg.Spec.ForProvider.ACLIDSelector,
		To: reference.To{
			List:    &NetworkACLList{},
			Managed: &NetworkACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ACLID")
	}
	mg.Spec.ForProvider.ACLID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ACLIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkOffering),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkOfferingRef,
		Selector:     mg.Spec.ForProvider.NetworkOfferingSelector,
		To: reference.To{
			List:    &NetworkOfferingList{},
			Managed: &NetworkOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkOffering")
	}
	mg.Spec.ForProvider.NetworkOffering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkOfferingRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PhysicalNetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PhysicalNetworkIDRef,
		Selector:     mg.Spec.ForProvider.PhysicalNetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PhysicalNetworkID")
	}
	mg.Spec.ForProvider.PhysicalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PhysicalNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ACLID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ACLIDRef,
		Selector:     mg.Spec.InitProvider.ACLIDSelector,
		To: reference.To{
			List:    &NetworkACLList{},
			Managed: &NetworkACL{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ACLID")
	}
	mg.Spec.InitProvider.ACLID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ACLIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkOffering),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NetworkOfferingRef,
		Selector:     mg.Spec.InitProvider.NetworkOfferingSelector,
		To: reference.To{
			List:    &NetworkOfferingList{},
			Managed: &NetworkOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkOffering")
	}
	mg.Spec.InitProvider.NetworkOffering = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkOfferingRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PhysicalNetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PhysicalNetworkIDRef,
		Selector:     mg.Spec.InitProvider.PhysicalNetworkIDSelector,
		To: reference.To{
			List:    &NetworkList{},
			Managed: &Network{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PhysicalNetworkID")
	}
	mg.Spec.InitProvider.PhysicalNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PhysicalNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecondaryIPAddress.
func (mg *SecondaryIPAddress) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NicID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NicIDRef,
		Selector:     mg.Spec.ForProvider.NicIDSelector,
		To: reference.To{
			List:    &NICList{},
			Managed: &NIC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NicID")
	}
	mg.Spec.ForProvider.NicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NicIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualMachineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VirtualMachineIDRef,
		Selector:     mg.Spec.ForProvider.VirtualMachineIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualMachineID")
	}
	mg.Spec.ForProvider.VirtualMachineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualMachineIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NicID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.NicIDRef,
		Selector:     mg.Spec.InitProvider.NicIDSelector,
		To: reference.To{
			List:    &NICList{},
			Managed: &NIC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NicID")
	}
	mg.Spec.InitProvider.NicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NicIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualMachineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VirtualMachineIDRef,
		Selector:     mg.Spec.InitProvider.VirtualMachineIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualMachineID")
	}
	mg.Spec.InitProvider.VirtualMachineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualMachineIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecurityGroupRule.
func (mg *SecurityGroupRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityGroupID")
	}
	mg.Spec.ForProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SecurityGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.SecurityGroupIDRef,
		Selector:     mg.Spec.InitProvider.SecurityGroupIDSelector,
		To: reference.To{
			List:    &SecurityGroupList{},
			Managed: &SecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityGroupID")
	}
	mg.Spec.InitProvider.SecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SecurityGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StaticNAT.
func (mg *StaticNAT) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPAddressID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IPAddressIDRef,
		Selector:     mg.Spec.ForProvider.IPAddressIDSelector,
		To: reference.To{
			List:    &IPAddressList{},
			Managed: &IPAddress{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddressID")
	}
	mg.Spec.ForProvider.IPAddressID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualMachineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VirtualMachineIDRef,
		Selector:     mg.Spec.ForProvider.VirtualMachineIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualMachineID")
	}
	mg.Spec.ForProvider.VirtualMachineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualMachineIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IPAddressID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.IPAddressIDRef,
		Selector:     mg.Spec.InitProvider.IPAddressIDSelector,
		To: reference.To{
			List:    &IPAddressList{},
			Managed: &IPAddress{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IPAddressID")
	}
	mg.Spec.InitProvider.IPAddressID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IPAddressIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualMachineID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VirtualMachineIDRef,
		Selector:     mg.Spec.InitProvider.VirtualMachineIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualMachineID")
	}
	mg.Spec.InitProvider.VirtualMachineID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualMachineIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this StaticRoute.
func (mg *StaticRoute) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.GatewayIDRef,
		Selector:     mg.Spec.ForProvider.GatewayIDSelector,
		To: reference.To{
			List:    &PrivateGatewayList{},
			Managed: &PrivateGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GatewayID")
	}
	mg.Spec.ForProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.GatewayIDRef,
		Selector:     mg.Spec.InitProvider.GatewayIDSelector,
		To: reference.To{
			List:    &PrivateGatewayList{},
			Managed: &PrivateGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GatewayID")
	}
	mg.Spec.InitProvider.GatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Template.
func (mg *Template) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ZoneRef,
		Selector:     mg.Spec.ForProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Zone")
	}
	mg.Spec.ForProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ZoneRef,
		Selector:     mg.Spec.InitProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Zone")
	}
	mg.Spec.InitProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this User.
func (mg *User) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Account),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AccountRef,
		Selector:     mg.Spec.ForProvider.AccountSelector,
		To: reference.To{
			List:    &AccountList{},
			Managed: &Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Account")
	}
	mg.Spec.ForProvider.Account = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AccountRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Account),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.AccountRef,
		Selector:     mg.Spec.InitProvider.AccountSelector,
		To: reference.To{
			List:    &AccountList{},
			Managed: &Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Account")
	}
	mg.Spec.InitProvider.Account = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AccountRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPC.
func (mg *VPC) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ZoneRef,
		Selector:     mg.Spec.ForProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Zone")
	}
	mg.Spec.ForProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Zone),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ZoneRef,
		Selector:     mg.Spec.InitProvider.ZoneSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Zone")
	}
	mg.Spec.InitProvider.Zone = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPNConnection.
func (mg *VPNConnection) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomerGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CustomerGatewayIDRef,
		Selector:     mg.Spec.ForProvider.CustomerGatewayIDSelector,
		To: reference.To{
			List:    &VPNCustomerGatewayList{},
			Managed: &VPNCustomerGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomerGatewayID")
	}
	mg.Spec.ForProvider.CustomerGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomerGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPNGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPNGatewayIDRef,
		Selector:     mg.Spec.ForProvider.VPNGatewayIDSelector,
		To: reference.To{
			List:    &VPNGatewayList{},
			Managed: &VPNGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPNGatewayID")
	}
	mg.Spec.ForProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPNGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CustomerGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CustomerGatewayIDRef,
		Selector:     mg.Spec.InitProvider.CustomerGatewayIDSelector,
		To: reference.To{
			List:    &VPNCustomerGatewayList{},
			Managed: &VPNCustomerGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CustomerGatewayID")
	}
	mg.Spec.InitProvider.CustomerGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CustomerGatewayIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPNGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPNGatewayIDRef,
		Selector:     mg.Spec.InitProvider.VPNGatewayIDSelector,
		To: reference.To{
			List:    &VPNGatewayList{},
			Managed: &VPNGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPNGatewayID")
	}
	mg.Spec.InitProvider.VPNGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPNGatewayIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VPNGateway.
func (mg *VPNGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCIDRef,
		Selector:     mg.Spec.ForProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCID")
	}
	mg.Spec.ForProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCIDRef,
		Selector:     mg.Spec.InitProvider.VPCIDSelector,
		To: reference.To{
			List:    &VPCList{},
			Managed: &VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCID")
	}
	mg.Spec.InitProvider.VPCID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Volume.
func (mg *Volume) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DiskOfferingID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DiskOfferingIDRef,
		Selector:     mg.Spec.ForProvider.DiskOfferingIDSelector,
		To: reference.To{
			List:    &DiskOfferingList{},
			Managed: &DiskOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DiskOfferingID")
	}
	mg.Spec.ForProvider.DiskOfferingID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DiskOfferingIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ZoneID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ZoneIDRef,
		Selector:     mg.Spec.ForProvider.ZoneIDSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ZoneID")
	}
	mg.Spec.ForProvider.ZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DiskOfferingID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DiskOfferingIDRef,
		Selector:     mg.Spec.InitProvider.DiskOfferingIDSelector,
		To: reference.To{
			List:    &DiskOfferingList{},
			Managed: &DiskOffering{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DiskOfferingID")
	}
	mg.Spec.InitProvider.DiskOfferingID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DiskOfferingIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ZoneID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ZoneIDRef,
		Selector:     mg.Spec.InitProvider.ZoneIDSelector,
		To: reference.To{
			List:    &ZoneList{},
			Managed: &Zone{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ZoneID")
	}
	mg.Spec.InitProvider.ZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneIDRef = rsp.ResolvedReference

	return nil
}
