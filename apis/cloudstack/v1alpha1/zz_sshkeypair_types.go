// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SSHKeypairInitParameters struct {

	// The name of the SSH key pair. This is a unique value
	// within a CloudStack account. Changing this forces a new resource to be
	// created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name or ID of the project to register this
	// key to. Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The public key to register with CloudStack. If
	// this is omitted, CloudStack will generate a new key pair. The key can
	// be loaded from a file on disk using the
	// file() function.
	// Changing this forces a new resource to be created.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type SSHKeypairObservation struct {

	// The fingerprint of the public key specified or created.
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// The key pair ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the SSH key pair. This is a unique value
	// within a CloudStack account. Changing this forces a new resource to be
	// created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The private key generated by CloudStack. Only available
	// if CloudStack generated the key pair.
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// The name or ID of the project to register this
	// key to. Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The public key to register with CloudStack. If
	// this is omitted, CloudStack will generate a new key pair. The key can
	// be loaded from a file on disk using the
	// file() function.
	// Changing this forces a new resource to be created.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type SSHKeypairParameters struct {

	// The name of the SSH key pair. This is a unique value
	// within a CloudStack account. Changing this forces a new resource to be
	// created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name or ID of the project to register this
	// key to. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The public key to register with CloudStack. If
	// this is omitted, CloudStack will generate a new key pair. The key can
	// be loaded from a file on disk using the
	// file() function.
	// Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

// SSHKeypairSpec defines the desired state of SSHKeypair
type SSHKeypairSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SSHKeypairParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SSHKeypairInitParameters `json:"initProvider,omitempty"`
}

// SSHKeypairStatus defines the observed state of SSHKeypair.
type SSHKeypairStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SSHKeypairObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SSHKeypair is the Schema for the SSHKeypairs API. Creates or registers an SSH key pair.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type SSHKeypair struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SSHKeypairSpec   `json:"spec"`
	Status SSHKeypairStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SSHKeypairList contains a list of SSHKeypairs
type SSHKeypairList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SSHKeypair `json:"items"`
}

// Repository type metadata.
var (
	SSHKeypair_Kind             = "SSHKeypair"
	SSHKeypair_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SSHKeypair_Kind}.String()
	SSHKeypair_KindAPIVersion   = SSHKeypair_Kind + "." + CRDGroupVersion.String()
	SSHKeypair_GroupVersionKind = CRDGroupVersion.WithKind(SSHKeypair_Kind)
)

func init() {
	SchemeBuilder.Register(&SSHKeypair{}, &SSHKeypairList{})
}
